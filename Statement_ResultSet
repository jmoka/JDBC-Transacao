## üìò Explica√ß√£o Completa: `Statement` e `ResultSet` no JDBC

---

### üìå O que √© o `Statement`?

#### ‚úÖ Defini√ß√£o:

O `Statement` √© uma **interface da API JDBC** que representa um **comando SQL est√°tico** (isto √©, sem par√¢metros) a ser enviado para o banco de dados.

> Ele √© usado principalmente para executar **comandos simples** como `SELECT`, `INSERT`, `UPDATE`, e `DELETE`.

#### ‚úÖ Cria√ß√£o:

```java
Statement stmt = connection.createStatement();
```

#### ‚úÖ M√©todos principais:

| M√©todo                      | Descri√ß√£o                                                                                                        |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------- |
| `executeQuery(String sql)`  | Executa comandos `SELECT`. Retorna um `ResultSet`.                                                               |
| `executeUpdate(String sql)` | Executa comandos `INSERT`, `UPDATE`, `DELETE`. Retorna um `int` com o n√∫mero de linhas afetadas.                 |
| `execute(String sql)`       | Executa comandos gen√©ricos (pode ser qualquer SQL). Retorna `boolean` indicando se o resultado √© um `ResultSet`. |

---

### üìå Exemplo com `Statement`:

```java
Connection conn = DB.getConnection();
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("SELECT * FROM funcionario");
```

---

### üìå O que √© o `ResultSet`?

#### ‚úÖ Defini√ß√£o:

O `ResultSet` √© uma **interface** que representa a **tabela de dados retornada** por uma consulta `SELECT`.

> Ele funciona como um cursor que percorre os resultados linha por linha.

#### ‚úÖ Navega√ß√£o:

| M√©todo              | Descri√ß√£o                                                                       |
| ------------------- | ------------------------------------------------------------------------------- |
| `next()`            | Avan√ßa para a pr√≥xima linha. Retorna `false` quando n√£o h√° mais linhas.         |
| `previous()`        | Volta para a linha anterior. (Funciona apenas se o `ResultSet` for scrollable.) |
| `absolute(int row)` | Vai diretamente para uma linha espec√≠fica.                                      |
| `beforeFirst()`     | Posiciona o cursor antes da primeira linha.                                     |
| `afterLast()`       | Posiciona o cursor depois da √∫ltima linha.                                      |

#### ‚úÖ Leitura de dados:

Voc√™ pode recuperar os dados por **√≠ndice da coluna** (baseado em 1) ou **nome da coluna**:

```java
int id = rs.getInt("id");
String nome = rs.getString("nome");
double salario = rs.getDouble(4); // supondo que a coluna 4 √© sal√°rio
```

#### ‚úÖ M√©todos comuns de leitura:

| M√©todo                      | Tipo de dado            |
| --------------------------- | ----------------------- |
| `getInt(String coluna)`     | Inteiros (`int`)        |
| `getString(String coluna)`  | Texto (`String`)        |
| `getDouble(String coluna)`  | Decimais (`double`)     |
| `getBoolean(String coluna)` | Booleano (`true/false`) |
| `getDate(String coluna)`    | Data (`java.sql.Date`)  |

---

### üß† Funcionamento passo a passo

1. **Cria√ß√£o da conex√£o com o banco**
2. **Cria√ß√£o do `Statement`**
3. **Execu√ß√£o do SQL com `executeQuery()`**
4. **Uso do `ResultSet` para percorrer os resultados**
5. **Fechamento de todos os recursos**

---

### ‚úÖ Exemplo completo com explica√ß√µes linha a linha:

```java
Connection conn = DB.getConnection();         // Conecta ao banco
Statement stmt = conn.createStatement();      // Cria um Statement simples
String sql = "SELECT nome, cargo FROM funcionario"; 
ResultSet rs = stmt.executeQuery(sql);        // Executa a consulta e armazena os resultados

while (rs.next()) {                           // Percorre os resultados
    String nome = rs.getString("nome");       // L√™ o campo "nome"
    String cargo = rs.getString("cargo");     // L√™ o campo "cargo"
    System.out.println(nome + " - " + cargo); // Imprime o resultado
}

rs.close();                                   // Fecha o ResultSet
stmt.close();                                 // Fecha o Statement
conn.close();                                 // Fecha a conex√£o
```

---

### ‚ö†Ô∏è Cuidados e Limita√ß√µes

| Situa√ß√£o           | Risco ou Limita√ß√£o                                                                                          |
| ------------------ | ----------------------------------------------------------------------------------------------------------- |
| Inje√ß√£o de SQL     | `Statement` **n√£o** protege contra SQL Injection. Use `PreparedStatement` para isso.                        |
| Manuten√ß√£o dif√≠cil | Queries concatenadas com `+` s√£o dif√≠ceis de manter.                                                        |
| Performance        | `PreparedStatement` √© mais eficiente para consultas repetidas.                                              |
| Navega√ß√£o limitada | `ResultSet` comum s√≥ permite **avan√ßo para frente** (`next()`), a menos que configurado de forma diferente. |

---

### üßΩ Boas Pr√°ticas

1. **Sempre feche** o `ResultSet`, `Statement` e `Connection` no `finally` ou com `try-with-resources`.
2. Prefira `PreparedStatement` para queries com **par√¢metros din√¢micos** (ex: por ID).
3. Use `getXXX()` correspondente ao tipo do campo no banco para evitar convers√µes indesejadas.
4. Mantenha a l√≥gica de consulta separada (DAO - Data Access Object).

---

### üß™ Exerc√≠cio sugerido

Modifique a seguinte consulta:

```sql
SELECT * FROM funcionario WHERE salario > 5000
```

E implemente em Java usando `Statement` + `ResultSet`, mostrando somente os nomes e sal√°rios de quem ganha mais de R\$ 5000.


