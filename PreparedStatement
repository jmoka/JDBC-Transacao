Claro! Vamos focar **somente** no `PreparedStatement`: o que √©, como se instancia, como funciona e por que usar.

---

## üîç O que √© `PreparedStatement`?

`PreparedStatement` √© uma **interface** do pacote `java.sql` usada para **executar comandos SQL parametrizados** em um banco de dados. Diferente do `Statement`, que executa uma string SQL direta, o `PreparedStatement` permite **definir par√¢metros** (representados por `?`) e depois atribuir valores a esses par√¢metros com seguran√ßa.

---

## üß† Por que usar `PreparedStatement`?

### ‚úÖ Vantagens principais:

| Vantagem         | Descri√ß√£o                                              |
| ---------------- | ------------------------------------------------------ |
| **Seguran√ßa**    | Evita ataques de SQL Injection                         |
| **Performance**  | O banco de dados pode pr√©-compilar o comando           |
| **Clareza**      | C√≥digo mais limpo com par√¢metros separados             |
| **Reutiliza√ß√£o** | Pode ser executado v√°rias vezes com valores diferentes |

---

## üõ†Ô∏è Como instanciar um `PreparedStatement`?

### üìå Sintaxe:

```java
PreparedStatement stmt = conexao.prepareStatement("SQL_COM_PARAMETROS");
```

* `conexao`: √© um objeto `Connection` j√° conectado ao banco.
* `"SQL_COM_PARAMETROS"`: √© o comando SQL com **placeholders `?`** para os valores que ser√£o inseridos.

---

### üß™ Exemplo pr√°tico:

```java
Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/meu_banco", "usuario", "senha");

String sql = "INSERT INTO usuarios (nome, email, idade) VALUES (?, ?, ?)";
PreparedStatement stmt = conn.prepareStatement(sql);

// Substituir os "?" com valores reais
stmt.setString(1, "Maria");
stmt.setString(2, "maria@email.com");
stmt.setInt(3, 28);

// Executa a inser√ß√£o
stmt.executeUpdate();
```

---

## üß© Como funciona internamente?

1. **Prepara√ß√£o do SQL com par√¢metros** (`?`)

   * Exemplo: `INSERT INTO usuarios (nome, email) VALUES (?, ?)`
2. **Compila√ß√£o pelo banco de dados**

   * O banco j√° entende a estrutura da consulta e otimiza.
3. **Atribui√ß√£o dos valores reais**

   * `stmt.setString(1, "Jo√£o");` ‚Üí O primeiro `?` recebe `"Jo√£o"`
4. **Execu√ß√£o**

   * `stmt.executeUpdate();` ‚Üí Executa a consulta j√° preparada com os valores definidos.
5. **Fechamento**

   * `stmt.close();`

---

## üß† M√©todos mais usados do `PreparedStatement`

| M√©todo                             | Descri√ß√£o                                            |
| ---------------------------------- | ---------------------------------------------------- |
| `setString(int pos, String valor)` | Define um valor de texto                             |
| `setInt(int pos, int valor)`       | Define um valor inteiro                              |
| `setDouble(int pos, double valor)` | Define um valor decimal                              |
| `executeUpdate()`                  | Executa comandos de escrita (INSERT, UPDATE, DELETE) |
| `executeQuery()`                   | Executa consultas (SELECT)                           |
| `close()`                          | Fecha o statement                                    |

---

## üß™ Resumo

* `PreparedStatement` √© uma forma **segura** e **eficiente** de executar SQL em Java.
* Os `?` s√£o **placeholders** para os valores que ser√£o definidos depois.
* O comando SQL √© **compilado uma vez** e pode ser executado v√°rias vezes com diferentes dados.
* Evita SQL Injection, facilita o c√≥digo e melhora o desempenho.

Se quiser, posso mostrar como usar `PreparedStatement` com `SELECT`, ou como us√°-lo com la√ßos para inserir m√∫ltiplos registros. Deseja um desses exemplos?
