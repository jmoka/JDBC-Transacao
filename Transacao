Claro! A seguir est√° uma **aula completa sobre Transa√ß√µes em Java**, com foco em aplica√ß√µes que utilizam JDBC e banco de dados relacional, explicando os conceitos fundamentais, a import√¢ncia das transa√ß√µes, como implement√°-las com controle manual e autom√°tico, al√©m de exemplos pr√°ticos.

---

# üéì Aula: **Transa√ß√µes em Java com JDBC**

---

## üìå Objetivo da Aula

Ao final desta aula, voc√™ ser√° capaz de:

* Entender o que √© uma transa√ß√£o no contexto de banco de dados;
* Aplicar transa√ß√µes manuais com `Connection` do JDBC;
* Utilizar `commit`, `rollback` e `setAutoCommit`;
* Compreender a import√¢ncia das transa√ß√µes em opera√ß√µes cr√≠ticas (como saques e dep√≥sitos banc√°rios);
* Implementar controle de transa√ß√µes em Java com exemplos reais.

---

## üìö Conceito: O que √© uma Transa√ß√£o?

Uma transa√ß√£o √© um conjunto de opera√ß√µes que devem ser executadas **todas com sucesso ou nenhuma delas**. Ou seja, elas seguem o princ√≠pio **ACID**:

| Letra | Significado  |
| ----- | ------------ |
| A     | Atomicidade  |
| C     | Consist√™ncia |
| I     | Isolamento   |
| D     | Durabilidade |

> Exemplo: Transfer√™ncia banc√°ria: subtrair de uma conta e adicionar em outra. Ambas as a√ß√µes devem acontecer, ou nenhuma delas.

---

## üõ†Ô∏è Configura√ß√£o Pr√©via

Antes de come√ßar, voc√™ deve:

* Ter um banco de dados MySQL ou outro compat√≠vel rodando;
* Ter um driver JDBC configurado;
* Ter uma tabela no banco, por exemplo:

```sql
CREATE TABLE contas (
  id INT PRIMARY KEY,
  nome VARCHAR(100),
  saldo DECIMAL(10, 2)
);

INSERT INTO contas VALUES (1, 'Jo√£o', 1000.00);
INSERT INTO contas VALUES (2, 'Maria', 500.00);
```

---

## üîó Conex√£o com o Banco

```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DB {
    public static Connection getConnection() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/seu_banco";
        String user = "root";
        String password = "sua_senha";

        return DriverManager.getConnection(url, user, password);
    }
}
```

---

## üéØ Exemplo 1: Transa√ß√£o Simples de Transfer√™ncia

```java
import java.sql.*;

public class TransferenciaBancaria {

    public static void transferir(int de, int para, double valor) {
        Connection conn = null;

        try {
            conn = DB.getConnection();

            // Desativa o autocommit
            conn.setAutoCommit(false);

            // 1. Subtrai da conta origem
            PreparedStatement stmt1 = conn.prepareStatement("UPDATE contas SET saldo = saldo - ? WHERE id = ?");
            stmt1.setDouble(1, valor);
            stmt1.setInt(2, de);
            stmt1.executeUpdate();

            // 2. Adiciona na conta destino
            PreparedStatement stmt2 = conn.prepareStatement("UPDATE contas SET saldo = saldo + ? WHERE id = ?");
            stmt2.setDouble(1, valor);
            stmt2.setInt(2, para);
            stmt2.executeUpdate();

            // Commit se tudo deu certo
            conn.commit();
            System.out.println("Transfer√™ncia realizada com sucesso!");

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Reverte se houve erro
                    System.out.println("Erro na transa√ß√£o. Rollback executado.");
                }
            } catch (SQLException ex) {
                System.out.println("Erro no rollback: " + ex.getMessage());
            }
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Volta ao padr√£o
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Erro ao fechar conex√£o: " + e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        transferir(1, 2, 300.00);
    }
}
```

---

## üìå Explica√ß√£o do C√≥digo

| Linha                       | Explica√ß√£o                                        |
| --------------------------- | ------------------------------------------------- |
| `conn.setAutoCommit(false)` | Inicia a transa√ß√£o manualmente                    |
| `stmt1.executeUpdate()`     | Executa a subtra√ß√£o do saldo                      |
| `stmt2.executeUpdate()`     | Executa o acr√©scimo do saldo                      |
| `conn.commit()`             | Confirma a transa√ß√£o                              |
| `conn.rollback()`           | Reverte todas as opera√ß√µes anteriores (caso erro) |
| `conn.setAutoCommit(true)`  | Restaura o modo autom√°tico                        |

---

## üö® Importante

* Se voc√™ **n√£o usar `commit()`**, nada ser√° salvo no banco;
* Sempre use `rollback()` em `catch` para garantir consist√™ncia;
* A ordem dos comandos √© **fundamental**;
* Preferencialmente use `try-with-resources` em produ√ß√µes reais.

---

## ‚úÖ Exemplo com try-with-resources (Java 7+)

```java
try (Connection conn = DB.getConnection()) {
    conn.setAutoCommit(false);

    try (PreparedStatement stmt1 = conn.prepareStatement("..."); 
         PreparedStatement stmt2 = conn.prepareStatement("...")) {

        // Executa comandos...

        conn.commit();
    } catch (SQLException e) {
        conn.rollback();
    }
}
```

---

## üß™ Testes e Comportamento

* Tente lan√ßar uma exce√ß√£o proposital entre as duas opera√ß√µes para simular falha.

```java
if (true) throw new SQLException("Falha simulada");
```

* Observe como o `rollback` impede altera√ß√µes parciais no banco.

---

## üöÄ Avan√ßado: Isolamento de Transa√ß√µes

Voc√™ pode definir o n√≠vel de isolamento com:

```java
conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
```

N√≠veis dispon√≠veis:

| Constante                      | Descri√ß√£o                                   |
| ------------------------------ | ------------------------------------------- |
| `TRANSACTION_READ_UNCOMMITTED` | Pode ler dados n√£o confirmados (dirty read) |
| `TRANSACTION_READ_COMMITTED`   | L√™ somente dados confirmados                |
| `TRANSACTION_REPEATABLE_READ`  | Mesmos dados em m√∫ltiplas leituras          |
| `TRANSACTION_SERIALIZABLE`     | Isolamento total                            |

---

## üìò Exerc√≠cio Proposto

**Crie um sistema de saque e dep√≥sito com as seguintes regras:**

* Um saque s√≥ √© realizado se houver saldo suficiente;
* Ambos os comandos devem estar dentro da mesma transa√ß√£o;
* Se houver falha, exibir mensagem e reverter a opera√ß√£o.

---

## üß† Conclus√£o

Transa√ß√µes s√£o fundamentais para a integridade de dados em aplica√ß√µes Java. Aprend√™-las √© essencial para sistemas banc√°rios, cont√°beis, e-commerce, entre outros.

---

## üìé Recursos Extras

* [Documenta√ß√£o oficial JDBC](https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html)
* [Transa√ß√µes e ACID no MySQL](https://dev.mysql.com/doc/refman/8.0/en/commit.html)

---

Se quiser, posso transformar essa aula em um **componente interativo em Vue.js com Vuetify** ou uma **apresenta√ß√£o HTML**, com bot√µes para simular transa√ß√µes. Deseja isso?
