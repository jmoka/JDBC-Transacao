## üß† Aula: Recupera√ß√£o de Dados em Banco de Dados com Java (Usando `Statement` e `ResultSet`)

---

### üéØ Objetivo da Aula

Ensinar como recuperar dados de um banco de dados utilizando **Java JDBC**, com foco nos objetos **`Statement`** e **`ResultSet`**, entendendo seu funcionamento, aplicabilidade, e boas pr√°ticas.

---

### üìö Pr√©-requisitos

* Java JDK instalado
* MySQL ou outro SGBD configurado
* Biblioteca JDBC (geralmente j√° inclu√≠da no JDK)
* Editor de c√≥digo (VS Code, IntelliJ ou Eclipse)
* Banco de dados com tabela criada

---

### üèóÔ∏è Estrutura do Projeto

```
/JDBC-DatabaseQuery
‚îú‚îÄ‚îÄ db/
‚îÇ   ‚îî‚îÄ‚îÄ DB.java
‚îú‚îÄ‚îÄ application/
‚îÇ   ‚îî‚îÄ‚îÄ Program.java
‚îî‚îÄ‚îÄ data.sql
```

---

### üß© Parte 1 ‚Äì Criando o Banco e a Tabela

```sql
-- data.sql
CREATE DATABASE empresa;

USE empresa;

CREATE TABLE funcionario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100),
    cargo VARCHAR(50),
    salario DECIMAL(10,2)
);

INSERT INTO funcionario (nome, cargo, salario) VALUES
('Jo√£o Silva', 'Analista', 4500.00),
('Maria Santos', 'Gerente', 8500.00),
('Carlos Lima', 'T√©cnico', 3000.00);
```

---

### ‚öôÔ∏è Parte 2 ‚Äì Conex√£o com o Banco (`DB.java`)

```java
package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DB {
    private static final String URL = "jdbc:mysql://localhost:3306/empresa";
    private static final String USER = "root";
    private static final String PASSWORD = "sua_senha";

    public static Connection getConnection() {
        try {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao conectar ao banco: " + e.getMessage());
        }
    }
}
```

---

### üì• Parte 3 ‚Äì Consulta com `Statement` e `ResultSet` (`Program.java`)

```java
package application;

import db.DB;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Program {
    public static void main(String[] args) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = DB.getConnection();

            // Cria√ß√£o do Statement
            stmt = conn.createStatement();

            // Executando a consulta
            String sql = "SELECT * FROM funcionario";
            rs = stmt.executeQuery(sql);

            // Iterando sobre os resultados
            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                String cargo = rs.getString("cargo");
                double salario = rs.getDouble("salario");

                System.out.printf("ID: %d, Nome: %s, Cargo: %s, Sal√°rio: %.2f%n",
                                  id, nome, cargo, salario);
            }

        } catch (SQLException e) {
            System.out.println("Erro: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("Erro ao fechar recursos: " + e.getMessage());
            }
        }
    }
}
```

---

### üõ†Ô∏è Explica√ß√µes

#### üîπ `Statement`

* Interface que executa comandos SQL est√°ticos.
* Usa `createStatement()` para instanciar.
* Usa `executeQuery()` para SELECT e `executeUpdate()` para INSERT/UPDATE/DELETE.

#### üîπ `ResultSet`

* Interface que representa os dados retornados por uma consulta SQL.
* `rs.next()` avan√ßa para a pr√≥xima linha.
* M√©todos como `getString`, `getInt`, `getDouble` acessam os dados por nome ou √≠ndice da coluna.

---

### üßº Boas Pr√°ticas

| Pr√°tica                                                  | Explica√ß√£o                                      |
| -------------------------------------------------------- | ----------------------------------------------- |
| Usar `try-catch-finally`                                 | Garante fechamento de conex√µes e recursos.      |
| Preferir `PreparedStatement` para queries com par√¢metros | Evita SQL Injection (veremos em aulas futuras). |
| Tratar exce√ß√µes de forma clara                           | Facilita debugging e manuten√ß√£o.                |
| Encapsular acesso ao banco                               | Melhora a organiza√ß√£o (ex: criar classe DAO).   |

---

### üí° Exerc√≠cio Proposto

1. Crie uma nova tabela chamada `departamento` com os campos `id`, `nome`, `sigla`.
2. Popule com 3 registros.
3. Crie um novo programa que recupere os departamentos e mostre no console usando `Statement` e `ResultSet`.

---

### ‚úÖ Resultado Esperado

```bash
ID: 1, Nome: Jo√£o Silva, Cargo: Analista, Sal√°rio: 4500.00
ID: 2, Nome: Maria Santos, Cargo: Gerente, Sal√°rio: 8500.00
ID: 3, Nome: Carlos Lima, Cargo: T√©cnico, Sal√°rio: 3000.00
```

---

### üéì Conclus√£o

Nesta aula voc√™ aprendeu a:

* Conectar ao banco de dados com JDBC
* Executar comandos SQL usando `Statement`
* Ler os dados com `ResultSet`
* Aplicar boas pr√°ticas no acesso a banco

